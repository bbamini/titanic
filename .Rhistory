}
}
nextword("how do you do ? today")
fruits <- c("one apple", "two pears", "three bananas")
str_remove(fruits, "[aeiou]")
library("ggplot2", lib.loc="~/R/win-library/3.4")
install.packages(c("caret", "data.table", "knitr", "stringi", "stringr"))
?str_remove
library(stringr)
?str_remove
shiny::runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
dbase <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbase.rds")
object.size(dbase)
head(dbase)
dbbu <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbbi.rds")
head(dbbu)
gram2_1 <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/gram2_1.rds")
gram2_2 <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/gram2_2.rds")
gram2_3 <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/gram2_3.rds")
gram2_4 <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/gram2_4.rds")
gram2_5 <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/gram2_5.rds")
bigrams <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/bigrams.rds")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US")
library(quanteda)
library(readtext)
library(data.table)
library(dplyr)
library(stringi)
library(stringr)
names(bigrams)
class(bigrams)
bigrams[counts == 1 & basecounts ==1]
sortedbi <- bigrams[order(base, prob)]
rm(gram2_1, gram2_2, gram2_3, gram2_4, gram2_5)
object.size(sortedbi)
bitop4 <- sortedbi[, tail(.SD, 4), by = base]
object.size(bitop4)
bitop2 <- sortedbi[, tail(.SD, 2), by = base]
object.size(bitop2)
bitop1 <- sortedbi[, tail(.SD, 1), by = base]
object.size(bitop1)
names(bitop1)
dbbi2 <- bitop2[, .(base, predicted)]
object.size(dbbi2)
dbbi1 <- bitop1[, .(base, predicted)]
object.size(dbbi1)
hist(bigrams)
hist(bigrams$prob)
hist(bigrams$prob, xlim = (0,.1) )
hist(bigrams$prob, xlim = .1)
hist(bigrams$prob, xlim = c(0,.1))
?hist
hist(bigrams$prob, xlim = c(0,.1), breaks = 20)
hist(bigrams$prob, xlim = c(0,.1), breaks = 80)
hist(bigrams$prob, xlim = c(0,.1), breaks = 100)
hist(bigrams$prob, xlim = c(0,.1), breaks = 150)
hist(bigrams$prob, xlim = c(0,.1), breaks = 100)
hist(bigrams$prob, xlim = c(0,.1), breaks = 220)
dbtetra <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtetra.rds")
object.size(dbtetra)
rm(dbtetra)
rm(bitop1, bitop2, bitop4)
bigramsmall <- bigrams[!(basecounts == 1)]
bigramsmall <- bigrams[!(counts == 1)]
hist(bigramsmall$prob, xlim = c(0,.1), breaks = 220)
hist(bigramsmall$prob
)
max(bigramsmall$prob)
bigramsmall[prob == 1]
View(bigramsmall[prob == 1])
object.size(bigramsmall)
bigramsmall <- bigramsmall[!(prob == 1)]
sortedbi <- bigramsmall[order(base, prob)]
bitop4 <- sortedbi[, tail(.SD, 4), by = base]
dbbi <- bitop4[, .(base, predicted)]
object.size(dbbi)
bitop4 <- sortedbi[, tail(.SD, 1), by = base]
dbbi <- bitop4[, .(base, predicted)]
object.size(dbbi)
View(bitop1)
View(bitop4)
bigramsmall <- bigrams[(counts > 5)]
bigramsmall <- bigramsmall[!(prob == 1)]
sortedbi <- bigramsmall[order(base, prob)]
bitop1 <- sortedbi[, tail(.SD, 1), by = base]
dbbi <- bitop4[, .(base, predicted)]
object.size(dbbi)
View(dbbi)
View(bitop1)
View(bitop1[prob > 0.9])
View(bitop1[prob < 0.01])
View(bitop1[prob < 0.05])
dbbi <- bitop1[, .(base, predicted)]
object.size(dbbi)
View(bigrams[prob == 1])
dbbismall <- saveRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbbismall.rds")
saveRDS(dbbismall, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbbismall.rds")
saveRDS(dbbi, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbbismall.rds")
trigrams <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/trigrams.rds")
View(trigrams[prob ==1])
View(trigrams[prob ==1, counts > 5])
View(trigrams[prob ==1 & counts > 5])
trigramsmall <- trigrams[prob ==1 & counts > 5]
object.size(trigrams)
object.size(trigramsmall)
View(trigramsmall)
trigramsmall <- trigrams[!(prob ==1 & counts < 5)]
object.size(trigramsmall)
sortedtri <- trigramsmall[order(base, prob)]
tritop3 <- sortedtri[, tail(.SD, 3), by = base]
dbtri <- tritop3[, .(base, predicted)]
object.size(dbtri)
saveRDS(dbtri, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtrismall.rds")
View(trigrams[counts < 5])
dim(trigrams[counts < 5])
View(trigramsmall[counts < 5])
dbtri[base == "i am"]
dbtri[base == "today was"]
dbtri[base == "st patricks"]
dbtri[base == "once upon"]
tritop1 <- sortedtri[, tail(.SD, 1), by = base]
dbtri <- tritop3[, .(base, predicted)]
saveRDS(dbtri, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtrismall.rds")
dbtri <- tritop1[, .(base, predicted)]
saveRDS(dbtri, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtrismall.rds")
head(trigramsmall)
head(trigramsmall[counts < 5])
tail(trigramsmall[counts < 5])
View(trigramsmall[counts < 5])
trigramsmall <- trigramsmall[counts > 5]
sortedtri <- trigramsmall[order(base, prob)]
tritop1 <- sortedtri[, tail(.SD, 1), by = base]
dbtri <- tritop1[, .(base, predicted)]
object.size(dbtri)
saveRDS(dbtri, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtrismall.rds")
tetragrams <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/tetragrams.rds")
head(tetragrams)
head(tetragrams, 1)
head(tetragrams, 1)$base
View(tetragrams[prob == 1])
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
hist(tetragramsmall$prob)
View(tetragrams[prob == 0.5])
tetragramsmall <- tetragramsmall[counts > 5]
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
tetragramsmall <- tetragramsmall[counts > 4]
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
View(tetragrams[counts == 2])
sortedtetra <- tetragramsmall[order(base, prob)]
tetratop1 <- sortedtetra[, tail(.SD, 1), by = base]
dbtetra <- tetratop1[, .(base, predicted)]
object.size(dbtetra)
saveRDS(dbtetra, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtetrasmall.rds")
tetragramsmall <- tetragramsmall[(counts > 4)]
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
tetragramsmall <- tetragramsmall[(counts > 3)]
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
tetragramsmall <- tetragramsmall[(counts > 2)]
sortedtetra <- tetragramsmall[order(base, prob)]
tetratop1 <- sortedtetra[, tail(.SD, 1), by = base]
dbtetra <- tetratop1[, .(base, predicted)]
object.size(dbtetra)
saveRDS(dbtetra, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtetrasmall.rds")
View(dbtetra)
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
tetragramsmall <- tetragramsmall[(counts > 3)]
sortedtetra <- tetragramsmall[order(base, prob)]
tetratop1 <- sortedtetra[, tail(.SD, 1), by = base]
dbtetra <- tetratop1[, .(base, predicted)]
object.size(dbtetra)
saveRDS(dbtetra, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtetrasmall.rds")
rm(sortedtetra, tetragrams, tetragramsmall, tetratop1)
dbtri <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtrismall.rds")
dbbi <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbbismall.rds")
test <- merge(dbbi, dbtri, all = TRUE)
dbase <- merge(test, dbtetra, all = TRUE)
object.size(dbase)
saveRDS(dbase, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
View(dbtri)
tetragrams <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/tetragrams.rds")
names(tetragrams)
tetragramsmall <- tetragrams[!(prob == 1 & counts < 5)]
tetragramsmall <- tetragramsmall[(counts > 4)]
sortedtetra <- tetragramsmall[order(base, prob)]
tetratop1 <- sortedtetra[, tail(.SD, 1), by = base]
dbtetra <- tetratop1[, .(base, predicted)]
test <- merge(dbbi, dbtri, all = TRUE)
dbase <- merge(test, dbtetra, all = TRUE)
saveRDS(dbase, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
View(dbase)
tetragramsmall <- tetragrams[!(prob == 1 & counts < 6)]
tetragramsmall <- tetragramsmall[(counts > 4)]
sortedtetra <- tetragramsmall[order(base, prob)]
tetratop1 <- sortedtetra[, tail(.SD, 1), by = base]
dbtetra <- tetratop1[, .(base, predicted)]
test <- merge(dbbi, dbtri, all = TRUE)
dbase <- merge(test, dbtetra, all = TRUE)
saveRDS(dbase, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
saveRDS(dbtetra, "C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbtetrasmall.rds")
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
test <- "THE QUICK BROWN"
tolower(test)
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
runApp('Coursera/Developing_Data_Products/Course_Project/WordPrediction')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
?runif
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
dbase <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
nextword <- function(phrase) {
newphrase <- gsub("\\s+", " ", str_trim(gsub("(?!')[[:punct:]]", "", phrase, perl = TRUE)))
newphrase <- tolower(newphrase)
last3words <- word(newphrase, -3, -1)
last2words <- word(newphrase, -2, -1)
lastword <- word(newphrase, -1)
tetraword <- dbase[base == last3words, predicted]
triword <- dbase[base == last2words, predicted]
biword <- dbase[base == lastword, predicted]
nextword <- c(biword, triword, tetraword)
return(nextword)
}
nextword("one fine day")
nextword("one fine")
nextword("one summer")
nextword("one day")
nextword("one fine day of")
nextword("one")
nextword("one of his")
nextword("how od")
nextword("how do")
nextword("how do you")
nextword("what a beautiful")
nextword("what a beautiful day")
nextword("what a beautiful day in")
nextword("what a beautiful day in this")
nextword("neighbor")
nextword("bottle of")
nextword("pack of")
nextword("case of")
nextword("case of the")
nextword("he has big")
nextword("the scientist blew into his")
nextword("the scientist got up to")
nextword("the scientist got up to go")
librarY(data.table)
library(data.table)
dbase <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
nextword <- function(phrase) {
newphrase <- gsub("\\s+", " ", str_trim(gsub("(?!')[[:punct:]]", "", phrase, perl = TRUE)))
newphrase <- tolower(newphrase)
last3words <- word(newphrase, -3, -1)
last2words <- word(newphrase, -2, -1)
lastword <- word(newphrase, -1)
tetraword <- dbase[base == last3words, predicted]
triword <- dbase[base == last2words, predicted]
biword <- dbase[base == lastword, predicted]
nextword <- c(biword, triword, tetraword)
return(tetraword, triword, biword)
}
nextword("this is a good day")
library(stringi)
library(stringr)
nextword("this is a good day")
nextword <- function(phrase) {
newphrase <- gsub("\\s+", " ", str_trim(gsub("(?!')[[:punct:]]", "", phrase, perl = TRUE)))
newphrase <- tolower(newphrase)
last3words <- word(newphrase, -3, -1)
last2words <- word(newphrase, -2, -1)
lastword <- word(newphrase, -1)
tetraword <- dbase[base == last3words, predicted]
triword <- dbase[base == last2words, predicted]
biword <- dbase[base == lastword, predicted]
nextword <- c(biword, triword, tetraword)
return(nextword)
}
nextword("this is a good day")
nextword("this is a celebration for")
length(nextword("this is a celebration for"))
test <- nextword("this is a celebration for")
test[3]
unique(test)
test
try2 <- c("bla", "the", bla)
try2 <- c("bla", "the", "bla")
unique(try2)
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
?ifelse
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
?gsub
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
dbase <- readRDS("C:/Users/bamini/Documents/Coursera/Capstone/final/en_US/Rev/dbasesmall.rds")
View(dbase)
shiny::runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
shiny::runApp('Coursera/Capstone/Shiny')
runApp('C:/Users/bamini/Desktop/test')
runApp('C:/Users/bamini/Desktop/test')
runApp('C:/Users/bamini/Desktop/test')
runApp('C:/Users/bamini/Desktop/test')
runApp('C:/Users/bamini/Desktop/test')
runApp('C:/Users/bamini/Desktop/test')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
names(tags)
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
library(devtools)
find_rtools()
install.packages("Rtools")
library("data.table", lib.loc="~/R/win-library/3.4")
library("devtools", lib.loc="~/R/win-library/3.4")
find_rtools()
library(devtools)
find_rtools()
install.packages("Rtools")
find_rtools()
library(devtools)
find_rtools()
runApp('Coursera/Capstone/Shiny')
runApp('Coursera/Capstone/Shiny')
?t.test
.5+1.96*.2
40!
?factorial
factorial(40)
2^40
library(MASS)
library(ISLR)
?Boston
head(Boston)
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
fit2=lm(medv~lstat+age,data=Boston)
abline(fit2, col = 'green')
fix(Carseats)
fit5=lm(medv~lstat*age,Boston)
summary(fit5)
fit5=lm(medv~I(lstat*age),Boston)
summary(fit5)
?glm
setwd("C:/Users/bamini/Documents/Coursera/Projects/titanic")
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
ggpairs(train)
library(GGally)
ggpairs(train)
class(train$Name)
names(train)
ggpairs(train[, c(1, 2, 3, 5, 6, 7, 8, 10, 12)])
ggpairs(train[, c(2, 3, 5, 6, 7, 8, 10, 12)])
?ggpairs
