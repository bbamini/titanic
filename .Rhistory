+   geom_density(alpha = 0.25, na.rm = TRUE)+
+   ggtitle("Age Density Plot by Survival")
ggplot(newtrain, aes(Age, fill = as.factor(title)))+
geom_density(alpha = 0.25, na.rm = TRUE)+
ggtitle("Age Density Plot by Survival")
ggplot(newtrain, aes(Age, fill = as.factor(title)))+
geom_density(alpha = 0.25, na.rm = TRUE)
labels(as.factor(newtrain$title))
labels(levels(newtrain$title))
(levels(newtrain$title))
ggplot(newtrain, aes(Age, fill = as.factor(title)))+
geom_density(alpha = 0.25, na.rm = TRUE)+
ggtitle("Age Density Plot by Title")+
scale_fill_discrete(name = "Title", labels = levels(newtrain$title))
newtrain$Age
average_age
round(average_age)
round(average_age$x)
aggregate(train_age$Age, by=list(train_age$title), mode)
?mode
mode(train_age$Age)
aggregate(train_age$Age, by=list(train_age$title), median)
aggregate(train_age$Age, by=list(train_age$title), mean, na.rm = TRUE)
?mutate_if
class(newtrain$Age)
mutate_if(newtrain$Age, is.numeric, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
mutate_if(newtrain, is.numeric, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
mean(newtrain$Age)
mean(newtrain$Age, na.rm = TRUE)
?mutate_if
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
test <- read.csv("test.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
library(class)
library(caret)
library(MASS)
library(randomForest)
library(e1071)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
pclass1 <- filter(train, Pclass == 1)
predictors <- dplyr::select(pclass1, Fare)
missing_emb <- is.na(pclass1$Embarked)
newtrain <- mutate(newtrain, Embark_all = Embarked)
newtrain$Embark_all[which(is.na(newtrain$Embark_all))] <- "S"
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
newtrain %>% group_by(title) %>% mutate(newage = impute.mean(Age))
head(newtrain)
aggregate(train_age$Age, by=list(train_age$title), mean)
int(32.6767)
integer(32.8989)
round(2123.2342)
library(randomForest)
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
test <- read.csv("test.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
library(class)
library(caret)
library(MASS)
library(randomForest)
library(e1071)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
pclass1 <- filter(train, Pclass == 1)
predictors <- dplyr::select(pclass1, Fare)
missing_emb <- is.na(pclass1$Embarked)
newtrain <- mutate(newtrain, Embark_all = Embarked)
newtrain$Embark_all[which(is.na(newtrain$Embark_all))] <- "S"
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE)))
newtrain <- newtrain %>% group_by(title) %>% mutate(newage = impute.mean(Age))
average_age
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
test <- read.csv("test.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
library(class)
library(caret)
library(MASS)
library(randomForest)
library(e1071)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
pclass1 <- filter(train, Pclass == 1)
predictors <- dplyr::select(pclass1, Fare)
missing_emb <- is.na(pclass1$Embarked)
newtrain <- mutate(newtrain, Embark_all = Embarked)
newtrain$Embark_all[which(is.na(newtrain$Embark_all))] <- "S"
missing_age <- is.na(newtrain$Age)
train_age <- newtrain[!missing_age, ]
average_age <- aggregate(train_age$Age, by=list(train_age$title), mean, na.rm = TRUE)
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE)))
newtrain <- newtrain %>% group_by(title) %>% mutate(newage = impute.mean(Age))
newtest <- mutate(test, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
newtitles <- sapply(newtest$title, update_title)
newtest$title <- as.factor(newtitles)
average_age
rate <- ggplot(train, aes(as.factor(Embarked),fill = as.factor(Survived)))+
geom_bar(position = "fill")+
xlab("Ticket Class") +
ylab("% Passengers") +
ggtitle("% Survival by Ticket Class") +
scale_fill_discrete(name = "Survived?", labels = c("No", "Yes"))
counts <- ggplot(train, aes(as.factor(Embarked),fill = as.factor(Survived)))+
geom_bar()+
xlab("Ticket Class") +
ylab("Number of Passengers") +
ggtitle("Survival Counts by Ticket Class") +
scale_fill_discrete(name = "Survived?", labels = c("No", "Yes"))
plot_grid(rate, counts, ncol = 2, nrow = 1)
?mutate_if
seq_along(newtest)
for (i in newtest): print i
for (i in newtest) {print i}
for (i in newtest) {print(i)}
?seq_along
dim(newtest)
for (i in dim(newtest)[1]) {print(i)}
for (i in 1:dim(newtest)[1]) {print(i)}
for (i in 1:dim(newtest)[1]) {
if is.numeric(newtest$Age[i]) {print(i)} }
?is.numeric
?ifelse
average_age
newage <- c()
for (i in 1:dim(newtest)[1]) {
if (is.na(newtest$Age[i])) {
if (newtest$title[i]== "Dr" ) {newage[i] <- 42.00}
if (newtest$title[i]== "Master" ) {newage[i] <- 5.00}
if (newtest$title[i]== "Miss" ) {newage[i] <- 22.00}
if (newtest$title[i]== "Mr" ) {newage[i] <- 33.00}
if (newtest$title[i]== "Mrs" ) {newage[i] <- 36.00}
if (newtest$title[i]== "Rev" ) {newage[i] <- 43.00}
} else {
newage[i] <- newtest$Age[i]
}
}
newage
head(newtest)
newtest <- mutate(newtest, Age = newage)
head(newtest)
head(newtest,20)
round(43.166667)
missingfare <- subset(newtest, is.na(Fare))
fit_fare <- lm(Fare ~ Pclass + Embark_all, newtrain)
model_fare <- predict(fit_fare, missingfare)
names(newtrain)
names(newtest)
newtest <- rename(newtest, Embark_all = Embarked)
names(newtest)
missingfare <- subset(newtest, is.na(Fare))
fit_fare <- lm(Fare ~ Pclass + Embark_all, newtrain)
model_fare <- predict(fit_fare, missingfare)
newtest$Fare[as.numeric(rownames(missingfare))] = model_fare
set.seed(101)
train_subset <- createDataPartition(y = newtrain$Survived, p = 0.75, list = FALSE)
drop.cols <- c('PassengerId', 'Name', 'Age', 'Ticket', 'Cabin', 'Embarked', 'Famsize')
newtrain_rev <- dplyr::select(newtrain, -one_of(drop.cols))
training <- newtrain_rev[train_subset, ]
validation <- newtrain_rev[-train_subset, ]
# Logistic Regression
glm_fit <- glm(Survived ~ ., family = binomial(link='logit'), data = training)
glm_fit_simple <- glm(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embark_all + NewAge,
family = binomial(link='logit'), data = training)
# Logistic Regression
glm_fit <- glm(Survived ~ ., family = binomial(link='logit'), data = training)
#glm_fit_simple <- glm(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embark_all + NewAge,
#                      family = binomial(link='logit'), data = training)
# Linear Discriminant Analysis
lda_fit <- lda(Survived ~ ., data = training)
# Bagging with Decision Trees
bag_fit <- train(Survived ~ ., data = training, method = "treebag")
# Random Forest
rf_fit <- train(Survived ~ ., data = training, method = "rf")
# Support Vector Machines
svm_fit <- svm(Survived ~ ., data = training, kernel = "linear")
CM_glm <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit, validation, type = "response"))))
CM_glm_simple <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit_simple, validation, type = "response"))))
CM_lda <- confusionMatrix(validation$Survived, predict(lda_fit, validation)$class)
CM_bag <- confusionMatrix(validation$Survived, predict(bag_fit, validation))
CM_rf <- confusionMatrix(validation$Survived, predict(rf_fit, validation))
CM_svm <- confusionMatrix(validation$Survived, predict(svm_fit, validation))
# Calculate model accuracies
sapply(list(glm = CM_glm, lda = CM_lda, bagging = CM_bag, RF = CM_rf, SVM = CM_svm), function(x) x$overall["Accuracy"])
names(training)
names(training)
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
test <- read.csv("test.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
library(class)
library(caret)
library(MASS)
library(randomForest)
library(e1071)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
newtrain$Embarked[which(is.na(newtrain$Embarked))] <- "S"
missing_age <- is.na(newtrain$Age)
train_age <- newtrain[!missing_age, ]
average_age <- aggregate(train_age$Age, by=list(train_age$title), mean, na.rm = TRUE)
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE)))
newtrain <- newtrain %>% group_by(title) %>% mutate(newage = impute.mean(Age))
newtest <- mutate(test, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
kable(t(summary(as.factor(newtest$title))))
newtitles <- sapply(newtest$title, update_title)
newtest$title <- as.factor(newtitles)
names(newtrain)
names(newtest)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
kable(t(summary(newtrain$title)))
names(newtrain)
newtrain$Embarked[which(is.na(newtrain$Embarked))] <- "S"
missing_age <- is.na(newtrain$Age)
train_age <- newtrain[!missing_age, ]
average_age <- aggregate(train_age$Age, by=list(train_age$title), mean, na.rm = TRUE)
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE)))
newtrain <- newtrain %>% group_by(title) %>% mutate(Age = impute.mean(Age))
names(newtrain)
names(newtest)
newtest <- mutate(test, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
kable(t(summary(as.factor(newtest$title))))
newtitles <- sapply(newtest$title, update_title)
newtest$title <- as.factor(newtitles)
#Renaming columns to match the model
newage <- c()
for (i in 1:dim(newtest)[1]) {
if (is.na(newtest$Age[i])) {
if (newtest$title[i]== "Dr" ) {newage[i] <- 42.00}
if (newtest$title[i]== "Master" ) {newage[i] <- 5.00}
if (newtest$title[i]== "Miss" ) {newage[i] <- 22.00}
if (newtest$title[i]== "Mr" ) {newage[i] <- 33.00}
if (newtest$title[i]== "Mrs" ) {newage[i] <- 36.00}
if (newtest$title[i]== "Rev" ) {newage[i] <- 43.00}
} else {
newage[i] <- newtest$Age[i]
}
}
newtest <- mutate(newtest, Age = newage)
names(newtest)
missingfare <- subset(newtest, is.na(Fare))
fit_fare <- lm(Fare ~ Pclass + Embarked, newtrain)
model_fare <- predict(fit_fare, missingfare)
newtest$Fare[as.numeric(rownames(missingfare))] = model_fare
set.seed(101)
train_subset <- createDataPartition(y = newtrain$Survived, p = 0.75, list = FALSE)
drop.cols <- c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Famsize')
newtrain_rev <- dplyr::select(newtrain, -one_of(drop.cols))
training <- newtrain_rev[train_subset, ]
validation <- newtrain_rev[-train_subset, ]
# Logistic Regression
glm_fit <- glm(Survived ~ ., family = binomial(link='logit'), data = training)
glm_fit_simple <- glm(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age,
family = binomial(link='logit'), data = training)
# Linear Discriminant Analysis
lda_fit <- lda(Survived ~ ., data = training)
# Bagging with Decision Trees
bag_fit <- train(Survived ~ ., data = training, method = "treebag")
# Random Forest
rf_fit <- train(Survived ~ ., data = training, method = "rf")
# Support Vector Machines
svm_fit <- svm(Survived ~ ., data = training, kernel = "linear")
CM_glm <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit, validation, type = "response"))))
CM_glm_simple <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit_simple, validation, type = "response"))))
CM_lda <- confusionMatrix(validation$Survived, predict(lda_fit, validation)$class)
CM_bag <- confusionMatrix(validation$Survived, predict(bag_fit, validation))
CM_rf <- confusionMatrix(validation$Survived, predict(rf_fit, validation))
CM_svm <- confusionMatrix(validation$Survived, predict(svm_fit, validation))
# Calculate model accuracies
sapply(list(glm = CM_glm, glm_simple = CM_glm_simple, lda = CM_lda, bagging = CM_bag, RF = CM_rf, SVM = CM_svm), function(x) x$overall["Accuracy"])
glm_pred <- as.factor(round(predict(glm_fit, newtest, type = "response")))
head(glm_pred)
head(newtest)
class(glm_pred)
?data.table
data.frame()
?data.frame
data.frame(ab = c(1,3) tas = c("a", "B"))
data.frame(ab = c(1,3), tas = c("a", "B"))
glm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit, newtest, type = "response"))))
head(glm_pred)
glm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit, newtest, type = "response"))))
glm_sim_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit_simple, newtest, type = "response"))))
lda_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(lda_fit, newtest)$class)
bag_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(bag_fit, newtest))
rf_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(rf_fit, newtest))
svm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(svm_fit, newtest))
names(training)
names(newtest)
drop.cols <- c('PassengerId', 'Name', 'Ticket', 'Cabin')
newtest_rev <- dplyr::select(newtest, -one_of(drop.cols))
glm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit, newtest_rev, type = "response"))))
glm_sim_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit_simple, newtest_rev, type = "response"))))
lda_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(lda_fit, newtest_rev)$class)
bag_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(bag_fit, newtest_rev))
rf_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(rf_fit, newtest_rev))
svm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(svm_fit, newtest_rev))
train <- read.csv("train.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
test <- read.csv("test.csv", na.strings = "", colClasses = c("Survived" = "factor", "Name" = "character",
"Pclass" = "factor"))
library(ggplot2)
library(dplyr)
library(cowplot)
library(stringr)
library(knitr)
library(VIM)
library(class)
library(caret)
library(MASS)
library(randomForest)
library(e1071)
newtrain <- mutate(train, Famsize = SibSp + Parch)
newtrain <- mutate(newtrain, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
update_title <- function(old_title){
if (is.element(old_title, c("Capt", "Col", "Don", "Jonkheer", "Major", "Sir"))) {
new_title <- "Mr"
} else if (old_title %in% c("Countess", "Lady", "Mme", "Ms", "Dona")) {
new_title <- "Mrs"
} else if (old_title == "Mlle") {
new_title <- "Miss"
} else if (old_title %in% c("Dr", "Master", "Miss", "Mr", "Mrs", "Ms", "Rev")) {
new_title <- old_title
}
return(new_title)
}
newtitles <- sapply(newtrain$title, update_title)
newtrain$title <- as.factor(newtitles)
pclass1 <- filter(train, Pclass == 1)
predictors <- dplyr::select(pclass1, Fare)
missing_emb <- is.na(pclass1$Embarked)
knn(data.frame(predictors[!missing_emb,]), data.frame(predictors[missing_emb,]), pclass1$Embarked[!missing_emb], k = as.integer(sqrt(dim(pclass1)[1])))
newtrain$Embarked[which(is.na(newtrain$Embarked))] <- "S"
missing_age <- is.na(newtrain$Age)
train_age <- newtrain[!missing_age, ]
average_age <- aggregate(train_age$Age, by=list(train_age$title), mean, na.rm = TRUE)
impute.mean <- function(x) replace(x, is.na(x), round(mean(x, na.rm = TRUE)))
newtrain <- newtrain %>% group_by(title) %>% mutate(Age = impute.mean(Age))
newtest <- mutate(test, title = str_replace(str_extract(Name, "[a-zA-Z]+[.]"), "[.]", ""))
newtitles <- sapply(newtest$title, update_title)
newtest$title <- as.factor(newtitles)
#Renaming columns to match the model
newage <- c()
for (i in 1:dim(newtest)[1]) {
if (is.na(newtest$Age[i])) {
if (newtest$title[i]== "Dr" ) {newage[i] <- 42.00}
if (newtest$title[i]== "Master" ) {newage[i] <- 5.00}
if (newtest$title[i]== "Miss" ) {newage[i] <- 22.00}
if (newtest$title[i]== "Mr" ) {newage[i] <- 33.00}
if (newtest$title[i]== "Mrs" ) {newage[i] <- 36.00}
if (newtest$title[i]== "Rev" ) {newage[i] <- 43.00}
} else {
newage[i] <- newtest$Age[i]
}
}
newtest <- mutate(newtest, Age = newage)
missingfare <- subset(newtest, is.na(Fare))
fit_fare <- lm(Fare ~ Pclass + Embarked, newtrain)
model_fare <- predict(fit_fare, missingfare)
newtest$Fare[as.numeric(rownames(missingfare))] = model_fare
set.seed(101)
train_subset <- createDataPartition(y = newtrain$Survived, p = 0.75, list = FALSE)
drop.cols <- c('PassengerId', 'Name', 'Ticket', 'Cabin', 'Famsize')
newtrain_rev <- dplyr::select(newtrain, -one_of(drop.cols))
training <- newtrain_rev[train_subset, ]
validation <- newtrain_rev[-train_subset, ]
# Logistic Regression
glm_fit <- glm(Survived ~ ., family = binomial(link='logit'), data = training)
glm_fit_simple <- glm(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age,
family = binomial(link='logit'), data = training)
# Linear Discriminant Analysis
lda_fit <- lda(Survived ~ ., data = training)
# Bagging with Decision Trees
bag_fit <- train(Survived ~ ., data = training, method = "treebag")
# Random Forest
rf_fit <- train(Survived ~ ., data = training, method = "rf")
# Support Vector Machines
svm_fit <- svm(Survived ~ ., data = training, kernel = "linear")
svm_fit_simple <- svm(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age,
data = training, kernel = "linear")
CM_glm <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit, validation, type = "response"))))
CM_glm_simple <- confusionMatrix(validation$Survived, as.factor(round(predict(glm_fit_simple, validation, type = "response"))))
CM_lda <- confusionMatrix(validation$Survived, predict(lda_fit, validation)$class)
CM_bag <- confusionMatrix(validation$Survived, predict(bag_fit, validation))
CM_rf <- confusionMatrix(validation$Survived, predict(rf_fit, validation))
CM_svm <- confusionMatrix(validation$Survived, predict(svm_fit, validation))
CM_svm_simple <- confusionMatrix(validation$Survived, predict(svm_fit_simple, validation))
# Calculate model accuracies
sapply(list(glm = CM_glm, glm_simple = CM_glm_simple, lda = CM_lda, bagging = CM_bag, RF = CM_rf, SVM = CM_svm, SVM_simple = CM_svm_simple),
function(x) x$overall["Accuracy"])
drop.cols <- c('PassengerId', 'Name', 'Ticket', 'Cabin')
newtest_rev <- dplyr::select(newtest, -one_of(drop.cols))
glm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit, newtest_rev, type = "response"))))
glm_sim_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = as.factor(round(predict(glm_fit_simple, newtest_rev, type = "response"))))
lda_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(lda_fit, newtest_rev)$class)
bag_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(bag_fit, newtest_rev))
rf_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(rf_fit, newtest_rev))
svm_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(svm_fit, newtest_rev))
svm_sim_pred <- data.frame(PassengerId = newtest$PassengerId, Survived = predict(svm_fit_simple, newtest_rev))
write.csv(glm_pred, file = "glm_pred.csv")
write.csv(glm_sim_pred, file = "glm_sim_pred.csv")
write.csv(lda_pred, file = "lda_pred.csv")
write.csv(bag_pred, file = "bag_pred.csv")
write.csv(rf_pred, file = "rf_pred.csv")
write.csv(svm_pred, file = "svm_pred.csv")
write.csv(svm_sim_pred, file = "svm_pred.csv")
?write.csv
write.csv(glm_pred, file = "glm_pred.csv", row.names = FALSE)
write.csv(glm_sim_pred, file = "glm_sim_pred.csv", row.names = FALSE)
write.csv(lda_pred, file = "lda_pred.csv", row.names = FALSE)
write.csv(bag_pred, file = "bag_pred.csv", row.names = FALSE)
write.csv(rf_pred, file = "rf_pred.csv", row.names = FALSE)
write.csv(svm_pred, file = "svm_pred.csv", row.names = FALSE)
write.csv(svm_sim_pred, file = "svm_pred.csv", row.names = FALSE)
write.csv(svm_pred, file = "svm_pred.csv", row.names = FALSE)
write.csv(svm_sim_pred, file = "svm_sim_pred.csv", row.names = FALSE)
